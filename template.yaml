AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless backend and GraphQL API for uploading objects to S3 securely

Parameters:
  S3BucketName:
    Type: String
    Default: 'upload-service-s3-bucket'

Globals:
  Function:
    Runtime: nodejs10.x
    Timeout: 10

Resources:

  # Can be queried by (id, created), (id, modified), (location, created)
  UploadTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
        - AttributeName: 'location'
          AttributeType: 'S'
        - AttributeName: 'created'
          AttributeType: 'S'
        - AttributeName: 'modified'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
        - AttributeName: 'created'
          KeyType: 'RANGE'
      LocalSecondaryIndexes:
        - IndexName: lastModified
          KeySchema:
            - AttributeName: 'id'
              KeyType: 'HASH'
            - AttributeName: 'modified'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: ALL
      GlobalSecondaryIndexes:
        - IndexName: location
          KeySchema:
            - AttributeName: 'location'
              KeyType: HASH
            - AttributeName: 'created'
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      TimeToLiveSpecification:
        AttributeName: 'ttl'
        Enabled: true
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  UploadObjectBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
            AllowedOrigins:
              - "*"

  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId

  AppSyncApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      AuthenticationType: "API_KEY"
      Name: "S3UploadAppSyncAPI"
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncServiceRole.Arn
        FieldLogLevel: ERROR

  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: ./graphql/schema.graphql

  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  AppSyncLambdaInvokePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "AppSyncLambdaInvokePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - !GetAtt UploadObjectLambdaFunction.Arn
              - !GetAtt UpdateUploadLambdaFunction.Arn
      Roles:
        - !Ref AppSyncServiceRole

  AppSyncDDBPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "AppSyncDDBPolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource:
              - !GetAtt UploadTable.Arn
      Roles:
        - !Ref AppSyncServiceRole

  # Lambdas

  StartProcessorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  StartProcessorStartExecutionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "StartProcessorStartExecutionPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "states:StartExecution"
            Resource:
              - !Ref ProcessorStateMachine
      Roles:
        - !Ref StartProcessorLambdaRole

  # Triggered to objects being upload to S3 buckets
  StartProcessorLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handler.zip
      Handler: startProcessor.handler
      Role: !GetAtt StartProcessorLambdaRole.Arn
      Environment:
        Variables:
          PROCESSING_STATE_MACHINE_ARN: !Ref ProcessorStateMachine
      Events:
        UploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref UploadObjectBucket
            Events:
              - 's3:ObjectCreated:Put'

  ProcessorStateMachineLambdaInvokePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ProcessorStateMachineLambdaInvokePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - !GetAtt AddMetadataLambdaFunction.Arn
      Roles:
        - !Ref ProcessorStateMachineRole

  ProcessorStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: !Sub "states.${AWS::Region}.amazonaws.com"
            Action:
              - sts:AssumeRole

  ProcessorStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt ProcessorStateMachineRole.Arn
      DefinitionString:
        Fn::Sub: |
          {
            "Comment": "State Machine for processing uploaded files",
            "StartAt": "Add Metadata",
            "States": {
              "Add Metadata": {
                "Type": "Task",
                "Resource": "${AddMetadataLambdaFunction.Arn}",
                "End": true
              }
            }
          }

  AddMetadataLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handler.zip
      Handler: processors/addMetadata.handler
      Environment:
        Variables:
          APPSYNC_URL: !GetAtt AppSyncApi.GraphQLUrl
          APPSYNC_REGION: !Ref "AWS::Region"
          APPSYNC_API_KEY: !GetAtt AppSyncApiKey.ApiKey
          UPLOAD_S3_BUCKET: !Ref S3BucketName
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName # Reference bucket name vs resource to avoid circular dependency

#  VirusScanLambdaFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: ./handler.zip
#      Handler: processors/virusScan.handler
#      Environment:
#        Variables:
#          APPSYNC_URL: !GetAtt AppSyncApi.GraphQLUrl
#          APPSYNC_REGION: !Ref "AWS::Region"
#          APPSYNC_API_KEY: !GetAtt AppSyncApiKey.ApiKey
#          UPLOAD_S3_BUCKET: !Ref S3BucketName
#      Policies:
#        - S3ReadPolicy:
#            BucketName: !Ref S3BucketName # Reference bucket name vs resource to avoid circular dependency
#
#  GenerateThumbnailLambdaFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: ./handler.zip
#      Handler: processors/generateThumbnail.handler
#      Environment:
#        Variables:
#          APPSYNC_URL: !GetAtt AppSyncApi.GraphQLUrl
#          APPSYNC_REGION: !Ref "AWS::Region"
#          APPSYNC_API_KEY: !GetAtt AppSyncApiKey.ApiKey
#          UPLOAD_S3_BUCKET: !Ref S3BucketName
#      Policies:
#        - S3ReadPolicy:
#            BucketName: !Ref S3BucketName # Reference bucket name vs resource to avoid circular dependency

  UploadObjectLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handler.zip
      Handler: resolvers/uploadObject.handler
      Environment:
        Variables:
          UPLOAD_S3_BUCKET: !Ref UploadObjectBucket
          UPLOAD_S3_BUCKET_REGION: !Ref "AWS::Region"
          UPLOAD_DDB_TABLE_NAME: !Ref UploadTable
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref UploadObjectBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref UploadTable

  UpdateUploadLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handler.zip
      Handler: resolvers/updateUpload.handler
      Environment:
        Variables:
          UPLOAD_DDB_TABLE_NAME: !Ref UploadTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UploadTable

  # AppSync Data Sources

  UploadDDBDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: UploadQueryDDBDataSource
      Description: "The AppSync Data Source for the upload dynamodb table"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref "AWS::Region"
        TableName: !Ref UploadTable

  UploadObjectLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: UploadObjectLambdaDataSource
      Description: "The AppSync Lambda Data Source for the uploadObject mutation"
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt UploadObjectLambdaFunction.Arn

  UpdateUploadLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: UpdateUploadLambdaDataSource
      Description: "The AppSync Lambda Data Source for the updateUpload mutation"
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt UpdateUploadLambdaFunction.Arn

  # Resolvers

  UploadQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: upload
      DataSourceName: !GetAtt UploadDDBDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key" : {
            "id" : { "S" : "${context.arguments.id}" }
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  UploadObjectMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: uploadObject
      DataSourceName: !GetAtt UploadObjectLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "arguments": $utils.toJson($ctx.args),
            "identity": $utils.toJson($context.identity),
            "request": $utils.toJson($context.request),
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  UpdateUploadOMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: updateUpload
      DataSourceName: !GetAtt UpdateUploadLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "arguments": $utils.toJson($ctx.args),
            "identity": $utils.toJson($context.identity),
            "request": $utils.toJson($context.request),
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

Outputs:
  GraphQLApiId:
    Description: Unique AWS AppSync GraphQL API Identifier
    Value: !GetAtt AppSyncApi.ApiId
    Export:
      Name: !Sub "${AWS::StackName}-GraphQLApiId"
  GraphQLApiUrl:
    Description: The Endpoint URL of your GraphQL API.
    Value: !GetAtt AppSyncApi.GraphQLUrl
    Export:
      Name: !Sub "${AWS::StackName}-GraphQLApiUrl"
  GraphQLApiRegion:
    Description: The AWS Region of your GraphQL API.
    Value: !Sub "${AWS::Region}"
    Export:
      Name: !Sub "${AWS::StackName}-GraphQLApiRegion"
