type Schema {
    query: Query
    mutation: Mutation
}

type Query {
    upload(id: String!): Upload
}

type Mutation {
    uploadObject(upload: UploadObjectInput!): UploadResponse!
    updateUpload(location: String!, update : UpdateUploadInput): Upload!
}

type Subscription {
    newUploadUpdate(customerId: String!): Upload
        @aws_subscribe(mutations: ["updateUpload"])
}

input UploadObjectInput {
    customerId: String!
    description: String
    name: String!
}

input UpdateUploadInput {
    name: String
    description: String
    status: UploadStatus!
    size: Int
    mimeType: String
    thumbnail: String
}

type UploadResponse {
    upload: Upload!
    # S3 presigned URL to upload file to
    uploadURL: AWSURL!
}

type Upload {
    id: String!
    customerId: String!
    name: String!
    # Where the object is stored in S3 with the format "Bucket/Key"
    location: String!,
    status: UploadStatus!
    created: AWSDateTime!
    modified: AWSDateTime!
    description: String
    # Size of the file in bytes
    size: Int
    # Mime type of the file e.g. 'text/plain' or 'image/jpeg'
    mimeType: String
    # Base64 encoded thumbnail of the file
    thumbnail: String
}

enum UploadStatus {
    COMPLETED
    CREATED
    REJECTED
    UPLOADED
}
